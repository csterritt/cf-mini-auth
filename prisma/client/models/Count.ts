
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Count` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Count
 * 
 */
export type CountModel = runtime.Types.Result.DefaultSelection<Prisma.$CountPayload>

export type AggregateCount = {
  _count: CountCountAggregateOutputType | null
  _avg: CountAvgAggregateOutputType | null
  _sum: CountSumAggregateOutputType | null
  _min: CountMinAggregateOutputType | null
  _max: CountMaxAggregateOutputType | null
}

export type CountAvgAggregateOutputType = {
  count: number | null
}

export type CountSumAggregateOutputType = {
  count: number | null
}

export type CountMinAggregateOutputType = {
  id: string | null
  count: number | null
}

export type CountMaxAggregateOutputType = {
  id: string | null
  count: number | null
}

export type CountCountAggregateOutputType = {
  id: number
  count: number
  _all: number
}


export type CountAvgAggregateInputType = {
  count?: true
}

export type CountSumAggregateInputType = {
  count?: true
}

export type CountMinAggregateInputType = {
  id?: true
  count?: true
}

export type CountMaxAggregateInputType = {
  id?: true
  count?: true
}

export type CountCountAggregateInputType = {
  id?: true
  count?: true
  _all?: true
}

export type CountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Count to aggregate.
   */
  where?: Prisma.CountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Counts to fetch.
   */
  orderBy?: Prisma.CountOrderByWithRelationInput | Prisma.CountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Counts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Counts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Counts
  **/
  _count?: true | CountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CountAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CountSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CountMaxAggregateInputType
}

export type GetCountAggregateType<T extends CountAggregateArgs> = {
      [P in keyof T & keyof AggregateCount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCount[P]>
    : Prisma.GetScalarType<T[P], AggregateCount[P]>
}




export type CountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CountWhereInput
  orderBy?: Prisma.CountOrderByWithAggregationInput | Prisma.CountOrderByWithAggregationInput[]
  by: Prisma.CountScalarFieldEnum[] | Prisma.CountScalarFieldEnum
  having?: Prisma.CountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CountCountAggregateInputType | true
  _avg?: CountAvgAggregateInputType
  _sum?: CountSumAggregateInputType
  _min?: CountMinAggregateInputType
  _max?: CountMaxAggregateInputType
}

export type CountGroupByOutputType = {
  id: string
  count: number
  _count: CountCountAggregateOutputType | null
  _avg: CountAvgAggregateOutputType | null
  _sum: CountSumAggregateOutputType | null
  _min: CountMinAggregateOutputType | null
  _max: CountMaxAggregateOutputType | null
}

type GetCountGroupByPayload<T extends CountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CountGroupByOutputType[P]>
      }
    >
  > 



export type CountWhereInput = {
  AND?: Prisma.CountWhereInput | Prisma.CountWhereInput[]
  OR?: Prisma.CountWhereInput[]
  NOT?: Prisma.CountWhereInput | Prisma.CountWhereInput[]
  id?: Prisma.StringFilter<"Count"> | string
  count?: Prisma.IntFilter<"Count"> | number
}

export type CountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type CountWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CountWhereInput | Prisma.CountWhereInput[]
  OR?: Prisma.CountWhereInput[]
  NOT?: Prisma.CountWhereInput | Prisma.CountWhereInput[]
  count?: Prisma.IntFilter<"Count"> | number
}, "id">

export type CountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  _count?: Prisma.CountCountOrderByAggregateInput
  _avg?: Prisma.CountAvgOrderByAggregateInput
  _max?: Prisma.CountMaxOrderByAggregateInput
  _min?: Prisma.CountMinOrderByAggregateInput
  _sum?: Prisma.CountSumOrderByAggregateInput
}

export type CountScalarWhereWithAggregatesInput = {
  AND?: Prisma.CountScalarWhereWithAggregatesInput | Prisma.CountScalarWhereWithAggregatesInput[]
  OR?: Prisma.CountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CountScalarWhereWithAggregatesInput | Prisma.CountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Count"> | string
  count?: Prisma.IntWithAggregatesFilter<"Count"> | number
}

export type CountCreateInput = {
  id?: string
  count: number
}

export type CountUncheckedCreateInput = {
  id?: string
  count: number
}

export type CountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  count?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  count?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CountCreateManyInput = {
  id?: string
  count: number
}

export type CountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  count?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  count?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type CountAvgOrderByAggregateInput = {
  count?: Prisma.SortOrder
}

export type CountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type CountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  count?: Prisma.SortOrder
}

export type CountSumOrderByAggregateInput = {
  count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type CountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  count?: boolean
}, ExtArgs["result"]["count"]>

export type CountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  count?: boolean
}, ExtArgs["result"]["count"]>

export type CountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  count?: boolean
}, ExtArgs["result"]["count"]>

export type CountSelectScalar = {
  id?: boolean
  count?: boolean
}

export type CountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "count", ExtArgs["result"]["count"]>

export type $CountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Count"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    count: number
  }, ExtArgs["result"]["count"]>
  composites: {}
}

export type CountGetPayload<S extends boolean | null | undefined | CountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CountPayload, S>

export type CountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CountCountAggregateInputType | true
  }

export interface CountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Count'], meta: { name: 'Count' } }
  /**
   * Find zero or one Count that matches the filter.
   * @param {CountFindUniqueArgs} args - Arguments to find a Count
   * @example
   * // Get one Count
   * const count = await prisma.count.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CountFindUniqueArgs>(args: Prisma.SelectSubset<T, CountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Count that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CountFindUniqueOrThrowArgs} args - Arguments to find a Count
   * @example
   * // Get one Count
   * const count = await prisma.count.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Count that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountFindFirstArgs} args - Arguments to find a Count
   * @example
   * // Get one Count
   * const count = await prisma.count.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CountFindFirstArgs>(args?: Prisma.SelectSubset<T, CountFindFirstArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Count that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountFindFirstOrThrowArgs} args - Arguments to find a Count
   * @example
   * // Get one Count
   * const count = await prisma.count.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Counts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Counts
   * const counts = await prisma.count.findMany()
   * 
   * // Get first 10 Counts
   * const counts = await prisma.count.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const countWithIdOnly = await prisma.count.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CountFindManyArgs>(args?: Prisma.SelectSubset<T, CountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Count.
   * @param {CountCreateArgs} args - Arguments to create a Count.
   * @example
   * // Create one Count
   * const Count = await prisma.count.create({
   *   data: {
   *     // ... data to create a Count
   *   }
   * })
   * 
   */
  create<T extends CountCreateArgs>(args: Prisma.SelectSubset<T, CountCreateArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Counts.
   * @param {CountCreateManyArgs} args - Arguments to create many Counts.
   * @example
   * // Create many Counts
   * const count = await prisma.count.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CountCreateManyArgs>(args?: Prisma.SelectSubset<T, CountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Counts and returns the data saved in the database.
   * @param {CountCreateManyAndReturnArgs} args - Arguments to create many Counts.
   * @example
   * // Create many Counts
   * const count = await prisma.count.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Counts and only return the `id`
   * const countWithIdOnly = await prisma.count.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Count.
   * @param {CountDeleteArgs} args - Arguments to delete one Count.
   * @example
   * // Delete one Count
   * const Count = await prisma.count.delete({
   *   where: {
   *     // ... filter to delete one Count
   *   }
   * })
   * 
   */
  delete<T extends CountDeleteArgs>(args: Prisma.SelectSubset<T, CountDeleteArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Count.
   * @param {CountUpdateArgs} args - Arguments to update one Count.
   * @example
   * // Update one Count
   * const count = await prisma.count.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CountUpdateArgs>(args: Prisma.SelectSubset<T, CountUpdateArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Counts.
   * @param {CountDeleteManyArgs} args - Arguments to filter Counts to delete.
   * @example
   * // Delete a few Counts
   * const { count } = await prisma.count.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CountDeleteManyArgs>(args?: Prisma.SelectSubset<T, CountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Counts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Counts
   * const count = await prisma.count.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CountUpdateManyArgs>(args: Prisma.SelectSubset<T, CountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Counts and returns the data updated in the database.
   * @param {CountUpdateManyAndReturnArgs} args - Arguments to update many Counts.
   * @example
   * // Update many Counts
   * const count = await prisma.count.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Counts and only return the `id`
   * const countWithIdOnly = await prisma.count.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Count.
   * @param {CountUpsertArgs} args - Arguments to update or create a Count.
   * @example
   * // Update or create a Count
   * const count = await prisma.count.upsert({
   *   create: {
   *     // ... data to create a Count
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Count we want to update
   *   }
   * })
   */
  upsert<T extends CountUpsertArgs>(args: Prisma.SelectSubset<T, CountUpsertArgs<ExtArgs>>): Prisma.Prisma__CountClient<runtime.Types.Result.GetResult<Prisma.$CountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Counts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountCountArgs} args - Arguments to filter Counts to count.
   * @example
   * // Count the number of Counts
   * const count = await prisma.count.count({
   *   where: {
   *     // ... the filter for the Counts we want to count
   *   }
   * })
  **/
  count<T extends CountCountArgs>(
    args?: Prisma.Subset<T, CountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Count.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CountAggregateArgs>(args: Prisma.Subset<T, CountAggregateArgs>): Prisma.PrismaPromise<GetCountAggregateType<T>>

  /**
   * Group by Count.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CountGroupByArgs['orderBy'] }
      : { orderBy?: CountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Count model
 */
readonly fields: CountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Count.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Count model
 */
export interface CountFieldRefs {
  readonly id: Prisma.FieldRef<"Count", 'String'>
  readonly count: Prisma.FieldRef<"Count", 'Int'>
}
    

// Custom InputTypes
/**
 * Count findUnique
 */
export type CountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * Filter, which Count to fetch.
   */
  where: Prisma.CountWhereUniqueInput
}

/**
 * Count findUniqueOrThrow
 */
export type CountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * Filter, which Count to fetch.
   */
  where: Prisma.CountWhereUniqueInput
}

/**
 * Count findFirst
 */
export type CountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * Filter, which Count to fetch.
   */
  where?: Prisma.CountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Counts to fetch.
   */
  orderBy?: Prisma.CountOrderByWithRelationInput | Prisma.CountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Counts.
   */
  cursor?: Prisma.CountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Counts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Counts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Counts.
   */
  distinct?: Prisma.CountScalarFieldEnum | Prisma.CountScalarFieldEnum[]
}

/**
 * Count findFirstOrThrow
 */
export type CountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * Filter, which Count to fetch.
   */
  where?: Prisma.CountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Counts to fetch.
   */
  orderBy?: Prisma.CountOrderByWithRelationInput | Prisma.CountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Counts.
   */
  cursor?: Prisma.CountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Counts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Counts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Counts.
   */
  distinct?: Prisma.CountScalarFieldEnum | Prisma.CountScalarFieldEnum[]
}

/**
 * Count findMany
 */
export type CountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * Filter, which Counts to fetch.
   */
  where?: Prisma.CountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Counts to fetch.
   */
  orderBy?: Prisma.CountOrderByWithRelationInput | Prisma.CountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Counts.
   */
  cursor?: Prisma.CountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Counts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Counts.
   */
  skip?: number
  distinct?: Prisma.CountScalarFieldEnum | Prisma.CountScalarFieldEnum[]
}

/**
 * Count create
 */
export type CountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * The data needed to create a Count.
   */
  data: Prisma.XOR<Prisma.CountCreateInput, Prisma.CountUncheckedCreateInput>
}

/**
 * Count createMany
 */
export type CountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Counts.
   */
  data: Prisma.CountCreateManyInput | Prisma.CountCreateManyInput[]
}

/**
 * Count createManyAndReturn
 */
export type CountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * The data used to create many Counts.
   */
  data: Prisma.CountCreateManyInput | Prisma.CountCreateManyInput[]
}

/**
 * Count update
 */
export type CountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * The data needed to update a Count.
   */
  data: Prisma.XOR<Prisma.CountUpdateInput, Prisma.CountUncheckedUpdateInput>
  /**
   * Choose, which Count to update.
   */
  where: Prisma.CountWhereUniqueInput
}

/**
 * Count updateMany
 */
export type CountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Counts.
   */
  data: Prisma.XOR<Prisma.CountUpdateManyMutationInput, Prisma.CountUncheckedUpdateManyInput>
  /**
   * Filter which Counts to update
   */
  where?: Prisma.CountWhereInput
  /**
   * Limit how many Counts to update.
   */
  limit?: number
}

/**
 * Count updateManyAndReturn
 */
export type CountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * The data used to update Counts.
   */
  data: Prisma.XOR<Prisma.CountUpdateManyMutationInput, Prisma.CountUncheckedUpdateManyInput>
  /**
   * Filter which Counts to update
   */
  where?: Prisma.CountWhereInput
  /**
   * Limit how many Counts to update.
   */
  limit?: number
}

/**
 * Count upsert
 */
export type CountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * The filter to search for the Count to update in case it exists.
   */
  where: Prisma.CountWhereUniqueInput
  /**
   * In case the Count found by the `where` argument doesn't exist, create a new Count with this data.
   */
  create: Prisma.XOR<Prisma.CountCreateInput, Prisma.CountUncheckedCreateInput>
  /**
   * In case the Count was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CountUpdateInput, Prisma.CountUncheckedUpdateInput>
}

/**
 * Count delete
 */
export type CountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
  /**
   * Filter which Count to delete.
   */
  where: Prisma.CountWhereUniqueInput
}

/**
 * Count deleteMany
 */
export type CountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Counts to delete
   */
  where?: Prisma.CountWhereInput
  /**
   * Limit how many Counts to delete.
   */
  limit?: number
}

/**
 * Count without action
 */
export type CountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Count
   */
  select?: Prisma.CountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Count
   */
  omit?: Prisma.CountOmit<ExtArgs> | null
}
